/**
 * Measures of similarity between two strings.
 * Implementation oh PHP's similar_text algo
 * This calculates the similarity between two strings as  
 * described in Programming Classics: Implementing the World's  
 * Best Algorithms by Oliver (ISBN 0-131-00413-1). Note that 
 * this implementation does not use a stack as in Oliver's 
 * pseudo code, but recursive calls which may or may not speed
 * up the whole process. Note also that the complexity of this 
 * algorithm is O(N**3) where N is the length of the longest 
 * string.
 * http://php.net/manual/en/function.similar-text.php
 * http://stackoverflow.com/questions/14136349/how-does-similar-text-work
 *
 */

exports.similarText=function(first, second, percent) {
  if (first === null || second === null || typeof first === 'undefined' || typeof second === 'undefined') {
    return 0;
  }
  first += '';
  second += '';
  var pos1 = 0,
    pos2 = 0,
    max = 0,
    firstLen = first.length,
    secondLen = second.length,
    p, q, l, sum;

  max = 0;

  for (p = 0; p < firstLen; p++) {
    for (q = 0; q < secondLen; q++) {
      for (l = 0;(p + l < firstLen) && (q + l < secondLen) && (first.charAt(p + l) === second.charAt(q + l)); l++);
      if (l > max) {
        max = l;
        pos1 = p;
        pos2 = q;
      }
    }
  }
  sum = max;
  if (sum) {
    if (pos1 && pos2) {
      sum += this.similarText(first.substr(0, pos1), second.substr(0, pos2));
    }
    if ((pos1 + max < firstLen) && (pos2 + max < secondLen)) {
      sum += this.similarText(first.substr(pos1 + max, firstLen - pos1 - max), second.substr(pos2 + max,
        secondLen - pos2 - max));
    }
  }
  if (!percent) {
    return sum;
  } else {
    return (sum * 200) / (firstLen + secondLen);
  }
}